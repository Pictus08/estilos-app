import{j as e}from"./jsx-runtime-Cf8x2fCZ.js";import{r as i}from"./index-QQMyt9Ur.js";import{c as m}from"./clsx-B-dksMZM.js";import"./index-yBjzXJbu.js";import"./_commonjsHelpers-CqkleIqs.js";const r=i.forwardRef(({className:s,checked:o,onChange:n,...d},p)=>e.jsxs("label",{className:m("inline-flex items-center cursor-pointer select-none",s),children:[e.jsx("input",{ref:p,type:"checkbox",className:"sr-only peer",checked:o,onChange:n,...d}),e.jsx("div",{className:"relative h-6 w-11 rounded-full bg-slate-300 peer-checked:bg-secondary transition-all shadow-inner",children:e.jsx("span",{className:"absolute left-0.5 top-1/2 -translate-y-1/2 h-5 w-5 translate-x-0 peer-checked:translate-x-5 transition-transform rounded-full bg-white shadow"})})]}));r.displayName="ToggleSwitch";r.__docgenInfo={description:"",methods:[],displayName:"ToggleSwitch",props:{className:{required:!1,tsType:{name:"string"},description:""}},composes:["Omit"]};const w={title:"Base/ToggleSwitch",component:r,tags:["autodocs"]},t={render:()=>{const[s,o]=i.useState(!0);return e.jsx(r,{checked:s,onChange:n=>o(n.currentTarget.checked)})}};var a,c,l;t.parameters={...t.parameters,docs:{...(a=t.parameters)==null?void 0:a.docs,source:{originalSource:`{
  render: () => {
    const [on, setOn] = useState(true);
    return <ToggleSwitch checked={on} onChange={e => setOn(e.currentTarget.checked)} />;
  }
}`,...(l=(c=t.parameters)==null?void 0:c.docs)==null?void 0:l.source}}};const S=["Controlled"];export{t as Controlled,S as __namedExportsOrder,w as default};
